{"version":3,"sources":["WithJSX.js","Home.js","Clock.js","LifecycleComponent.js","StatelessComponent.js","ComponentWithClass.js","Components.js","App.js","serviceWorker.js","index.js"],"names":["HelloWithJSX","react_default","a","createElement","this","props","toWhat","React","Component","Home","showImageBeforeMount","className","src","WithJSX","Clock","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","_this2","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","LifecycleComponent","src_Clock","StatelessComponent","_ref","text1","text2","alt","ComponentWithClass","_this$props","Compontents","src_StatelessComponent","src_ComponentWithClass","App","BrowserRouter","Link","to","Route","exact","path","component","Components","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31461478.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass HelloWithJSX extends React.Component {\r\n    render() {\r\n      return <div>React (with JSX) {this.props.toWhat}</div>;\r\n    }\r\n  }\r\n\r\nexport default HelloWithJSX;","import React, { Component } from 'react';\r\nimport './Home.css';\r\nimport HelloWithJSX from './WithJSX';\r\nclass Home extends Component {\r\nshowImageBeforeMount = false;\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <img src=\"./img/heart.png\" />\r\n\r\n          <p>\r\n            Home Test\r\n          </p>\r\n        This is how to React works!\r\n        <HelloWithJSX toWhat=\"World\" />\r\n        <HelloWithJSX toWhat=\"People\" />\r\n        <HelloWithJSX toWhat=\"Everyone!\" />\r\n\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {date: new Date()};\r\n    }\r\n  \r\n    componentDidMount() {\r\n      this.timerID = setInterval(\r\n        () => this.tick(),\r\n        1000\r\n      );\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      clearInterval(this.timerID);\r\n    }\r\n  \r\n    tick() {\r\n      this.setState({\r\n        date: new Date()\r\n      });\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <h1>Hello, world!</h1>\r\n          <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  \r\nexport default Clock;  ","import React, { Component } from 'react';\r\nimport './LifecycleComponent.css';\r\nimport Clock from './Clock';\r\n\r\n\r\nclass LifecycleComponent extends Component {\r\n  // updateSession = false;\r\n  // demount = false;\r\n  // mountSession = false;\r\n// componentWillMount() {\r\n//   this.updateSession = true;\r\n// }\r\n// componentDidMount() {\r\n//   this.mountSession = true;\r\n// }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>\r\n            Lifecycle Test\r\n          </h1>\r\n        To test lifecycle we used example from React documentation :) \r\n\r\n        <Clock/>\r\n        {/* Mounted:\r\n        {this.mountSession && \r\n        <div>\r\n        <h5>Component Did Mount</h5>\r\n        <img src=\"./img/heart.png\" />\r\n        </div> }  \r\n        Update:\r\n        {this.updateSession && \r\n        <div>\r\n        <h5>Component Will Mount</h5>\r\n        <img src=\"./img/heart.png\" />\r\n        </div> }\r\n         Demount:\r\n         {this.demount && \r\n        <div>\r\n        <h5>componentWillUnmount</h5>\r\n        <img src=\"./img/heart.png\" />\r\n        </div> }   */}\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LifecycleComponent;\r\n","import React from 'react';\r\n\r\nfunction StatelessComponent({ text1, text2 }) {\r\n    const imgUrl = './img/heart.png';\r\n    return (\r\n        <div>\r\n            <img src={imgUrl} alt=\"heart\"  />\r\n            <h1 className=\"header\">{text1}</h1>\r\n            <div>{text2}</div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  export default StatelessComponent;","import React from 'react';\r\n\r\nclass ComponentWithClass extends React.Component {\r\n    render() {\r\n    const { text1, text2 } = this.props;\r\n    const imgUrl = './img/heart.png';\r\n    return (\r\n        <div>\r\n            <img src={imgUrl}  alt=\"heart\" />\r\n            <h1 className=\"header\">{text1}</h1>\r\n            <div>{text2}</div>\r\n        </div>\r\n    );\r\n    };\r\n  }\r\n\r\n  export default ComponentWithClass;\r\n","import StatelessComponent from './StatelessComponent';\r\nimport ComponentWithClass from './ComponentWithClass';\r\nimport React, { Component } from 'react';\r\n\r\nclass Compontents extends Component {\r\n    \r\n      render() {\r\n\r\n        return(\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n            <div className=\"Component-Presentation\">\r\n            <StatelessComponent text1=\"Component\" text2=\"stateless\" />\r\n            </div>\r\n             <div className=\"Component-Presentation\">\r\n            <ComponentWithClass text1=\"Component\" text2=\"with class\" />\r\n            </div>\r\n        </header>\r\n        </div>\r\n        );\r\n      }\r\n        \r\n}\r\nexport default Compontents;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link\r\n} from 'react-router-dom';\r\nimport './logo.svg';\r\nimport Home from './Home';\r\nimport LifecycleComponent from './LifecycleComponent';\r\nimport Components from './Components';\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n     <div className=\"App\">\r\n\r\n\r\n        <ul className=\"App-menu\">\r\n            <li className=\"name-of-website\">\r\n              React Overview\r\n            </li>\r\n            <li>\r\n              <Link to=\"/home\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/components\">Components</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/lifecycle\">Learn about lifecycle</Link>\r\n            </li>\r\n          </ul>\r\n\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/home\" component={Home} />\r\n          <Route path=\"/lifecycle\" component={LifecycleComponent} />\r\n          <Route path=\"/components\" component={Components} />\r\n\r\n        </div>\r\n      </Router>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}